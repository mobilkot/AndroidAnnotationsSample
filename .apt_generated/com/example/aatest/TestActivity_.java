//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.example.aatest;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.EditText;
import android.widget.TextView;
import com.example.aatest.R.id;
import com.example.aatest.R.layout;
import com.example.aatest.R.string;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import com.googlecode.androidannotations.api.SdkVersionHelper;

public final class TestActivity_
    extends TestActivity
{

    private Handler handler_ = new Handler();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        setContentView(layout.test_activity);
    }

    private void init_(Bundle savedInstanceState) {
        Resources resources_ = this.getResources();
        myHelloString = resources_.getString(string.hello_world);
        injectExtras_();
        restoreSavedInstanceState_(savedInstanceState);
    }

    private void afterSetContentView_() {
        testactivity_first_edittext = ((EditText) findViewById(id.testactivity_first_edittext));
        secondTextView = ((TextView) findViewById(id.testactivity_second_edittext));
        {
            View view = findViewById(id.testactivity_second_button);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        TestActivity_.this.secondButtonWasClicked();
                    }

                }
                );
            }
        }
        {
            View view = findViewById(id.testactivity_first_button);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        TestActivity_.this.firstButtonWasClicked();
                    }

                }
                );
            }
        }
        updateTextWithDate();
        {
            final TextView view = ((TextView) findViewById(id.testactivity_second_edittext));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void afterTextChanged(Editable s) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        TestActivity_.this.onTextChangesOnSomeTextViews(view, s);
                    }

                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                }
                );
            }
        }
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        afterSetContentView_();
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    public static TestActivity_.IntentBuilder_ intent(Context context) {
        return new TestActivity_.IntentBuilder_(context);
    }

    @SuppressWarnings("unchecked")
    private<T >T cast_(Object object) {
        return ((T) object);
    }

    private void injectExtras_() {
        Intent intent_ = getIntent();
        Bundle extras_ = intent_.getExtras();
        if (extras_!= null) {
            if (extras_.containsKey("myMessage")) {
                try {
                    myMessage = cast_(extras_.get("myMessage"));
                } catch (ClassCastException e) {
                    Log.e("TestActivity_", "Could not cast extra to expected type, the field is left to its default value", e);
                }
            }
        }
    }

    @Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @Override
    public void onBGTaskFinish(final String resultText) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    TestActivity_.super.onBGTaskFinish(resultText);
                } catch (RuntimeException e) {
                    Log.e("TestActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void publishProgress(final int progress) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    TestActivity_.super.publishProgress(progress);
                } catch (RuntimeException e) {
                    Log.e("TestActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void backgroundWork() {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    TestActivity_.super.backgroundWork();
                } catch (RuntimeException e) {
                    Log.e("TestActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        bundle.putString("stateToSave", stateToSave);
    }

    private void restoreSavedInstanceState_(Bundle savedInstanceState) {
        if (savedInstanceState == null) {
            return ;
        }
        stateToSave = savedInstanceState.getString("stateToSave");
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, TestActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public TestActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public TestActivity_.IntentBuilder_ myMessage(String myMessage) {
            intent_.putExtra("myMessage", myMessage);
            return this;
        }

    }

}
